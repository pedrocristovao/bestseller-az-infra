name: Terraform CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  #Azure
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}

  #Terraform Backend
  TF_BACKEND_RG: ${{ secrets.TF_BACKEND_RG }}
  TF_BACKEND_STORAGE: ${{ secrets.TF_BACKEND_STORAGE }}
  TF_BACKEND_CONTAINER: ${{ secrets.TF_BACKEND_CONTAINER }}
  TF_BACKEND_KEY_TRIAGE: ${{ secrets.TF_BACKEND_KEY_TRIAGE }}
  TF_BACKEND_KEY_PRODUCTION: ${{ secrets.TF_BACKEND_KEY_PRODUCTION }}


jobs:
  terraform-triage-plan:
    name: Plan Triage Environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.5.7

      - name: Install TFLint
        run: curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

      - name: Run TFLint
        run: tflint --init && tflint
        working-directory: triage

      - name: Terraform Init
        run: |
          terraform init \
          -backend-config="resource_group_name=${TF_BACKEND_RG}" \
          -backend-config="storage_account_name=${TF_BACKEND_STORAGE}" \
          -backend-config="container_name=${TF_BACKEND_CONTAINER}" \
          -backend-config="key=${TF_BACKEND_KEY_TRIAGE}"
        working-directory: triage 
      
      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: triage

      - name: Upload Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: triage/tfplan


  terraform-triage-apply:
    name: Apply Triage Plan
    if: github.event_name == 'workflow_dispatch' 
    needs: terraform-triage-plan
    runs-on: ubuntu-latest
    environment:
      name: triage-apply

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.5.7

      - name: Download Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: triage
      
      - name: terraform Init
        run: terraform init
        working-directory: triage

      - name: Terraform Apply
        run: terraform apply tfplan
        working-directory: triage


    terraform-production-plan:
    name: Plan Production Environment
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.5.7

      - name: Install TFLint
        run: curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

      - name: Run TFLint
        run: tflint --init && tflint
        working-directory: prod

      - name: Terraform Init
        run: |
          terraform init \
          -backend-config="resource_group_name=${TF_BACKEND_RG}" \
          -backend-config="storage_account_name=${TF_BACKEND_STORAGE}" \
          -backend-config="container_name=${TF_BACKEND_CONTAINER}" \
          -backend-config="key=${TF_BACKEND_KEY_PRODUCTION}"
        working-directory: prod

      - name: Terraform Plan
        run: terraform plan -out=prod/tfplan
        working-directory: prod

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: prod-tfplan
          path: prod/tfplan

  terraform-production-apply:
    name: Apply Production Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment:
      name: production-apply
    steps:
      - uses: actions/checkout@v2

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.5.7

      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: prod-tfplan
          path: prod

      - name: Terraform Init
        run: terraform init
        working-directory: prod

      - name: Terraform Apply
        run: terraform apply tfplan
        working-directory: prod





        